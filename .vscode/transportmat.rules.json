{
  "project": "TransportMat",
  "scope": "Full-stack fleet and transport management platform",
  "rules": [
    "Interpret the role of each file within the greater architecture of TransportMat — all modules must contribute to operational workflows.",
    "Cross-reference frontend components (modals, dashboards, forms) with backend Firestore collections and Firebase Functions.",
    "Every feature must support lifecycle logic: from user input → Firestore write → real-time UI update → export → audit.",
    "Modules must interoperate: e.g., JobCard updates must influence Inventory, Tyre, and Audit modules where applicable.",
    "Menu routes and sidebar entries must accurately open their corresponding views. No orphan routes allowed.",
    "Avoid mock data — always use real template data (jobCardTemplates, tyreData, etc.) or integrate it from WebBooks where defined.",
    "Realtime syncing using Firestore listeners (`onSnapshot`) must reflect all backend changes immediately in UI components.",
    "Validate that backend Functions (especially for ingestion or calculations) directly affect UI state, exports, and analytics.",
    "All system feedback (toasts, validations, sync indicators) must match the success/failure state of backend operations.",
    "Every data form must integrate validation, submission, and audit logging by default. Nothing should be isolated.",
    "Component logic must include hooks or services to manage sync, state update, and integration with Firebase security rules.",
    "Treat all spelling inconsistencies as flexible, but confirm functional alignment — map 'tyre'/'tire', 'fleetNo'/'fleetNumber', etc.",
    "Respect the division between JavaScript Firebase Functions and TypeScript frontend — bridge correctly via shared types or clearly defined interfaces.",
    "When deploying, ensure Firestore, Storage, RealtimeDB, and Function endpoints are fully aligned with frontend routing, filters, and dashboards.",
    "All systems must support production readiness — no placeholders, experimental toggles, or commented-out code in final builds."
  ]
}

// This file defines the rules and guidelines for the TransportMat project, ensuring that all components work cohesively
// and that the architecture supports the intended workflows and functionalities. Each rule is designed to maintain consistency,
// reliability, and clarity across the full-stack application, from frontend components to backend services and data management.
// The rules also emphasize the importance of real-time data handling, user experience consistency, and the integration of all modules
// within the TransportMat ecosystem. By adhering to these guidelines, developers can ensure that the application remains robust,