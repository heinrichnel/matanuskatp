import React, { useState } from 'react';
import { Trip, CostEntry } from '../../types/index';
import Button from '../ui/Button';
import Card, { CardContent } from '../ui/Card';

interface SystemCostGeneratorProps {
  trip: Trip;
  onGenerateSystemCosts: (systemCosts: Omit<CostEntry, 'id' | 'attachments'>[]) => void;
}

export const SystemCostGenerator: React.FC<SystemCostGeneratorProps> = ({ trip, onGenerateSystemCosts }) => {
  const [includeDepreciation, setIncludeDepreciation] = useState(true);
  const [includeOverhead, setIncludeOverhead] = useState(true);
  const [includeInsurance, setIncludeInsurance] = useState(true);
  const [includeMaintenance, setIncludeMaintenance] = useState(true);

  // Calculate system costs based on trip data and selected options
  const calculateSystemCosts = () => {
    const systemCosts: Omit<CostEntry, 'id' | 'attachments'>[] = [];
    const distanceKm = trip.distanceKm || 0;
    const durationDays = calculateTripDurationInDays(trip);

    // Add depreciation cost if selected
    if (includeDepreciation) {
      systemCosts.push({
        tripId: trip.id,
        category: 'System',
        subCategory: 'Vehicle Depreciation',
        notes: `Automatic vehicle depreciation cost for ${distanceKm} km. Automatically generated by system`,
        amount: calculateDepreciationCost(distanceKm),
        currency: trip.revenueCurrency || 'USD',
        date: new Date().toISOString().split('T')[0],
        referenceNumber: `SYS-DEP-${Date.now()}`,
        isSystemGenerated: true,
        isFlagged: false,
        flagReason: '',
        investigationStatus: 'pending',
        investigationNotes: ''
      });
    }

    // Add overhead cost if selected
    if (includeOverhead) {
      systemCosts.push({
        tripId: trip.id,
        category: 'System',
        subCategory: 'Overhead Allocation',
        notes: `Automatic overhead allocation for ${durationDays} days. Automatically generated by system`,
        amount: calculateOverheadCost(durationDays),
        currency: trip.revenueCurrency || 'USD',
        date: new Date().toISOString().split('T')[0],
        referenceNumber: `SYS-OVH-${Date.now()}`,
        isSystemGenerated: true,
        isFlagged: false,
        flagReason: '',
        investigationStatus: 'pending',
        investigationNotes: ''
      });
    }

    // Add insurance cost if selected
    if (includeInsurance) {
      systemCosts.push({
        tripId: trip.id,
        category: 'System',
        subCategory: 'Insurance',
        notes: `Automatic insurance cost for ${durationDays} days. Automatically generated by system`,
        amount: calculateInsuranceCost(durationDays),
        currency: trip.revenueCurrency || 'USD',
        date: new Date().toISOString().split('T')[0],
        referenceNumber: `SYS-INS-${Date.now()}`,
        isSystemGenerated: true,
        isFlagged: false,
        flagReason: '',
        investigationStatus: 'pending',
        investigationNotes: ''
      });
    }

    // Add maintenance cost if selected
    if (includeMaintenance) {
      systemCosts.push({
        tripId: trip.id,
        category: 'System',
        subCategory: 'Maintenance',
        notes: `Automatic maintenance cost for ${distanceKm} km. Automatically generated by system`,
        amount: calculateMaintenanceCost(distanceKm),
        currency: trip.revenueCurrency || 'USD',
        date: new Date().toISOString().split('T')[0],
        referenceNumber: `SYS-MNT-${Date.now()}`,
        isSystemGenerated: true,
        isFlagged: false,
        flagReason: '',
        investigationStatus: 'pending',
        investigationNotes: ''
      });
    }

    return systemCosts;
  };

  // Helper functions for cost calculations
  const calculateTripDurationInDays = (trip: Trip): number => {
    if (!trip.startDate || !trip.endDate) return 1;

    const start = new Date(trip.startDate);
    const end = new Date(trip.endDate);
    const diffTime = Math.abs(end.getTime() - start.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return Math.max(1, diffDays); // Minimum 1 day
  };

  const calculateDepreciationCost = (distanceKm: number): number => {
    // Example: $0.15 per km for depreciation
    return Math.round(distanceKm * 0.15);
  };

  const calculateOverheadCost = (durationDays: number): number => {
    // Example: $75 per day for overhead
    return durationDays * 75;
  };

  const calculateInsuranceCost = (durationDays: number): number => {
    // Example: $50 per day for insurance
    return durationDays * 50;
  };

  const calculateMaintenanceCost = (distanceKm: number): number => {
    // Example: $0.08 per km for maintenance
    return Math.round(distanceKm * 0.08);
  };

  const handleGenerateSystemCosts = () => {
    const costs = calculateSystemCosts();
    onGenerateSystemCosts(costs);
  };

  return (
    <Card>
      <CardContent>
        <h3 className="text-lg font-medium mb-4">Generate System Costs</h3>
        <p className="text-sm text-gray-600 mb-4">
          System costs are automatically calculated based on trip distance, duration, and vehicle type.
          These costs ensure accurate profitability assessment by including fixed operational costs.
        </p>

        <div className="space-y-3 mb-6">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="depreciation"
              checked={includeDepreciation}
              onChange={(e) => setIncludeDepreciation(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="depreciation" className="text-sm">
              Vehicle Depreciation ({trip.distanceKm || 0} km × $0.15/km = ${calculateDepreciationCost(trip.distanceKm || 0)})
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="overhead"
              checked={includeOverhead}
              onChange={(e) => setIncludeOverhead(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="overhead" className="text-sm">
              Overhead Allocation ({calculateTripDurationInDays(trip)} days × $75/day = ${calculateOverheadCost(calculateTripDurationInDays(trip))})
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="insurance"
              checked={includeInsurance}
              onChange={(e) => setIncludeInsurance(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="insurance" className="text-sm">
              Insurance ({calculateTripDurationInDays(trip)} days × $50/day = ${calculateInsuranceCost(calculateTripDurationInDays(trip))})
            </label>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="maintenance"
              checked={includeMaintenance}
              onChange={(e) => setIncludeMaintenance(e.target.checked)}
              className="mr-2"
            />
            <label htmlFor="maintenance" className="text-sm">
              Maintenance ({trip.distanceKm || 0} km × $0.08/km = ${calculateMaintenanceCost(trip.distanceKm || 0)})
            </label>
          </div>
        </div>

        <div className="border-t pt-4">
          <div className="flex justify-between items-center">
            <div>
              <p className="font-medium">Total System Costs:</p>
              <p className="text-lg font-bold">
                ${
                  (includeDepreciation ? calculateDepreciationCost(trip.distanceKm || 0) : 0) +
                  (includeOverhead ? calculateOverheadCost(calculateTripDurationInDays(trip)) : 0) +
                  (includeInsurance ? calculateInsuranceCost(calculateTripDurationInDays(trip)) : 0) +
                  (includeMaintenance ? calculateMaintenanceCost(trip.distanceKm || 0) : 0)
                }
              </p>
            </div>
            <Button onClick={handleGenerateSystemCosts}>
              Generate System Costs
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SystemCostGenerator;
