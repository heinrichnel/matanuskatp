rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Base rules for all authenticated requests
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper functions to check ownership
    function isOwner() {
      return request.auth != null && 
             resource.metadata != null && 
             resource.metadata.userId == request.auth.uid;
    }

    // Validate metadata for uploads
    function hasValidMetadata() {
      return request.resource.metadata != null && 
             request.resource.metadata.userId == request.auth.uid &&
             request.resource.metadata.createdAt != null;
    }
    
    // Validate file size (max 15MB)
    function isValidFileSize() {
      return request.resource.size <= 15 * 1024 * 1024;
    }
    
    // Validate file type
    function isValidFileType() {
      return request.resource.contentType.matches('image/.*|application/pdf|text/csv|application/vnd.ms-excel|application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    }
    
    // Trip attachment rules
    match /trips/{tripId}/{attachmentType}/{fileName} {
      // Check if a trip document exists in Firestore
      function tripExists() {
        return firestore.get(/databases/(default)/documents/trips/$(tripId)).exists;
      }
      
      allow read: if isAuthenticated() && tripExists();
      
      allow create: if isAuthenticated() && 
                      tripExists() && 
                      hasValidMetadata() &&
                      isValidFileSize() &&
                      isValidFileType();
                      
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Cost entry attachment rules
    match /costs/{costId}/{fileName} {
      // Check if a cost document exists in Firestore
      function costExists() {
        return firestore.get(/databases/(default)/documents/costs/$(costId)).exists;
      }
      
      // Get the associated trip ID from the cost document
      function getTripId() {
        let costDoc = firestore.get(/databases/(default)/documents/costs/$(costId));
        return costDoc.data.tripId;
      }
      
      // Check if the associated trip exists
      function associatedTripExists() {
        let tripId = getTripId();
        return firestore.get(/databases/(default)/documents/trips/$(tripId)).exists;
      }
      
      allow read: if isAuthenticated() && costExists();
      
      allow create: if isAuthenticated() && 
                      costExists() && 
                      associatedTripExists() &&
                      hasValidMetadata() &&
                      isValidFileSize() &&
                      isValidFileType();
                      
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Driver behavior event attachment rules
    match /driverBehavior/{eventId}/{fileName} {
      // Check if a driver behavior event document exists in Firestore
      function eventExists() {
        return firestore.get(/databases/(default)/documents/driverBehavior/$(eventId)).exists;
      }
      
      allow read: if isAuthenticated() && eventExists();
      
      allow create: if isAuthenticated() && 
                      eventExists() &&
                      hasValidMetadata() &&
                      isValidFileSize() &&
                      isValidFileType();
                      
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // CAR Report attachment rules
    match /carReports/{reportId}/{fileName} {
      // Check if a CAR report document exists in Firestore
      function reportExists() {
        return firestore.get(/databases/(default)/documents/carReports/$(reportId)).exists;
      }
      
      allow read: if isAuthenticated() && reportExists();
      
      allow create: if isAuthenticated() && 
                      reportExists() &&
                      hasValidMetadata() &&
                      isValidFileSize() &&
                      isValidFileType();
                      
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Action item attachment rules
    match /actionItems/{itemId}/{fileName} {
      // Check if an action item document exists in Firestore
      function itemExists() {
        return firestore.get(/databases/(default)/documents/actionItems/$(itemId)).exists;
      }
      
      allow read: if isAuthenticated() && itemExists();
      
      allow create: if isAuthenticated() && 
                      itemExists() &&
                      hasValidMetadata() &&
                      isValidFileSize() &&
                      isValidFileType();
                      
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Additional Cost supporting documents
    match /additionalCosts/{costId}/{fileName} {
      // Check if an additional cost document exists in Firestore
      function additionalCostExists() {
        return firestore.get(/databases/(default)/documents/additionalCosts/$(costId)).exists;
      }
      
      // Get the associated trip ID from the additional cost document
      function getTripIdFromAdditionalCost() {
        let costDoc = firestore.get(/databases/(default)/documents/additionalCosts/$(costId));
        return costDoc.data.tripId;
      }
      
      // Check if the associated trip exists
      function associatedTripExists() {
        let tripId = getTripIdFromAdditionalCost();
        return firestore.get(/databases/(default)/documents/trips/$(tripId)).exists;
      }
      
      allow read: if isAuthenticated() && additionalCostExists();
      
      allow create: if isAuthenticated() && 
                      additionalCostExists() &&
                      associatedTripExists() &&
                      hasValidMetadata() &&
                      isValidFileSize() &&
                      isValidFileType();
                      
      allow update, delete: if isAuthenticated() && isOwner();
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}