/**
 * Example: Modern, Soft-Colored, Responsive UI with Real-Time Sync
 * Tech Stack: React, styled-components, Material UI, Socket.io, Express, MongoDB
 * This is a simplified, but extensible, implementation skeleton.
 */

// App.jsx
import React, { useEffect, useState } from "react";
import styled, { ThemeProvider, createGlobalStyle } from "styled-components";
import { CssBaseline, Fab, Snackbar } from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import Sidebar from "./components/Sidebar";
import TableView from "./components/TableView";
import ModalForm from "./components/ModalForm";
import FilterBar from "./components/FilterBar";
import { io } from "socket.io-client";
import { theme, GlobalStyles } from "./theme";
import { logInteraction } from "./utils/audit";

const socket = io(process.env.REACT_APP_BACKEND_URL);

const AppContainer = styled.div`
    display: flex;
    min-height: 100vh;
    background: linear-gradient(135deg, #f7fafc 0%, #e3e9f3 100%);
`;

const MainContent = styled.main`
    flex: 1;
    padding: 2rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
`;

function App() {
    const [records, setRecords] = useState([]);
    const [modalOpen, setModalOpen] = useState(false);
    const [editingRecord, setEditingRecord] = useState(null);
    const [filter, setFilter] = useState("");
    const [snackbar, setSnackbar] = useState({ open: false, message: "" });

    // Real-time sync
    useEffect(() => {
        socket.on("records", (data) => setRecords(data));
        socket.emit("getRecords");
        return () => socket.off("records");
    }, []);

    // Audit logging
    const handleAudit = (action, details) => logInteraction(action, details);

    // CRUD Handlers
    const handleAdd = () => {
        setEditingRecord(null);
        setModalOpen(true);
        handleAudit("open_add_modal", {});
    };

    const handleEdit = (record) => {
        setEditingRecord(record);
        setModalOpen(true);
        handleAudit("open_edit_modal", { id: record._id });
    };

    const handleDelete = (id) => {
        if (window.confirm("Are you sure you want to delete this record?")) {
            socket.emit("deleteRecord", id);
            handleAudit("delete_record", { id });
            setSnackbar({ open: true, message: "Record deleted." });
        }
    };

    const handleModalSubmit = (data) => {
        if (editingRecord) {
            socket.emit("updateRecord", { ...editingRecord, ...data });
            handleAudit("update_record", { id: editingRecord._id, data });
        } else {
            socket.emit("addRecord", data);
            handleAudit("add_record", { data });
        }
        setModalOpen(false);
        setSnackbar({ open: true, message: "Record saved." });
    };

    // Filtering
    const filteredRecords = records.filter((rec) =>
        Object.values(rec).join(" ").toLowerCase().includes(filter.toLowerCase())
    );

    return (
        <ThemeProvider theme={theme}>
            <CssBaseline />
            <GlobalStyles />
            <AppContainer>
                <Sidebar />
                <MainContent>
                    <FilterBar value={filter} onChange={setFilter} />
                    <TableView
                        records={filteredRecords}
                        onEdit={handleEdit}
                        onDelete={handleDelete}
                    />
                    <Fab
                        color="primary"
                        aria-label="add"
                        onClick={handleAdd}
                        sx={{ position: "fixed", bottom: 32, right: 32, boxShadow: 3 }}
                    >
                        <AddIcon />
                    </Fab>
                </MainContent>
                <ModalForm
                    open={modalOpen}
                    onClose={() => setModalOpen(false)}
                    onSubmit={handleModalSubmit}
                    initialData={editingRecord}
                />
                <Snackbar
                    open={snackbar.open}
                    autoHideDuration={3000}
                    onClose={() => setSnackbar({ ...snackbar, open: false })}
                    message={snackbar.message}
                />
            </AppContainer>
        </ThemeProvider>
    );
}

export default App;

// theme.js
import { createGlobalStyle } from "styled-components";
export const theme = {
    palette: {
        primary: { main: "#7b9acc" },
        background: { default: "#f7fafc" },
        text: { primary: "#222", secondary: "#6b7280" },
    },
    typography: {
        fontFamily: "'Inter', sans-serif",
        fontSize: 16,
    },
    shadows: [
        "none",
        "0 1px 4px rgba(60,72,88,0.08)",
        "0 2px 8px rgba(60,72,88,0.10)",
    ],
};
export const GlobalStyles = createGlobalStyle`
    body {
        background: ${theme.palette.background.default};
        color: ${theme.palette.text.primary};
        font-family: ${theme.typography.fontFamily};
        font-size: ${theme.typography.fontSize}px;
        margin: 0;
        letter-spacing: 0.01em;
    }
`;

// components/Sidebar.jsx
import React, { useState } from "react";
import styled from "styled-components";
import MenuIcon from "@mui/icons-material/Menu";
const SidebarContainer = styled.nav`
    width: ${(props) => (props.collapsed ? "60px" : "220px")};
    background: #e3e9f3;
    box-shadow: 2px 0 8px rgba(60,72,88,0.05);
    transition: width 0.2s;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem 0;
`;
const CollapseButton = styled.button`
    background: none;
    border: none;
    margin-bottom: 2rem;
    cursor: pointer;
    color: #7b9acc;
    font-size: 1.5rem;
`;
export default function Sidebar() {
    const [collapsed, setCollapsed] = useState(false);
    return (
        <SidebarContainer collapsed={collapsed}>
            <CollapseButton onClick={() => setCollapsed((c) => !c)}>
                <MenuIcon />
            </CollapseButton>
            {!collapsed && (
                <>
                    <div style={{ margin: "1rem 0", fontWeight: 600 }}>Dashboard</div>
                    {/* Add navigation links here */}
                </>
            )}
        </SidebarContainer>
    );
}

// components/FilterBar.jsx
import React from "react";
import styled from "styled-components";
const FilterInput = styled.input`
    width: 100%;
    max-width: 400px;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    border: 1px solid #d1d5db;
    background: #f3f6fa;
    font-size: 1rem;
    box-shadow: 0 1px 4px rgba(60,72,88,0.04);
    margin-bottom: 1rem;
`;
export default function FilterBar({ value, onChange }) {
    return (
        <FilterInput
            placeholder="Search or filter records..."
            value={value}
            onChange={(e) => onChange(e.target.value)}
        />
    );
}

// components/TableView.jsx
import React from "react";
import styled from "styled-components";
const Table = styled.table`
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 8px;
    background: transparent;
`;
const Th = styled.th`
    text-align: left;
    padding: 0.75rem 1rem;
    color: #6b7280;
    font-weight: 600;
    background: #f3f6fa;
    border-radius: 8px 8px 0 0;
`;
const Td = styled.td`
    padding: 0.75rem 1rem;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 1px 4px rgba(60,72,88,0.04);
    color: #222;
    vertical-align: middle;
`;
const ActionButton = styled.button`
    background: none;
    border: none;
    color: #7b9acc;
    margin: 0 0.5rem;
    cursor: pointer;
    font-size: 1.1rem;
`;
export default function TableView({ records, onEdit, onDelete }) {
    if (!records.length)
        return <div style={{ color: "#6b7280" }}>No records found.</div>;
    const keys = Object.keys(records[0] || {});
    return (
        <Table>
            <thead>
                <tr>
                    {keys.map((k) => (
                        <Th key={k}>{k}</Th>
                    ))}
                    <Th>Actions</Th>
                </tr>
            </thead>
            <tbody>
                {records.map((rec) => (
                    <tr key={rec._id}>
                        {keys.map((k) => (
                            <Td key={k}>{rec[k]}</Td>
                        ))}
                        <Td>
                            <ActionButton onClick={() => onEdit(rec)}>‚úèÔ∏è</ActionButton>
                            <ActionButton onClick={() => onDelete(rec._id)}>üóëÔ∏è</ActionButton>
                        </Td>
                    </tr>
                ))}
            </tbody>
        </Table>
    );
}

// components/ModalForm.jsx
import React, { useState, useEffect } from "react";
import styled from "styled-components";
const ModalOverlay = styled.div`
    position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
    background: rgba(60,72,88,0.12); display: ${(p) => (p.open ? "flex" : "none")};
    align-items: center; justify-content: center; z-index: 1000;
`;
const ModalBox = styled.form`
    background: #fff; border-radius: 16px; box-shadow: 0 4px 24px rgba(60,72,88,0.12);
    padding: 2rem; min-width: 320px; max-width: 90vw;
    display: flex; flex-direction: column; gap: 1.5rem;
`;
const Input = styled.input`
    padding: 0.75rem 1rem; border-radius: 8px; border: 1px solid #d1d5db;
    background: #f3f6fa; font-size: 1rem;
`;
const ButtonRow = styled.div`
    display: flex; justify-content: flex-end; gap: 1rem;
`;
const Button = styled.button`
    padding: 0.75rem 1.5rem; border-radius: 8px; border: none;
    background: ${(p) => (p.primary ? "#7b9acc" : "#e3e9f3")};
    color: ${(p) => (p.primary ? "#fff" : "#222")};
    font-weight: 600; cursor: pointer; box-shadow: 0 1px 4px rgba(60,72,88,0.04);
`;
export default function ModalForm({ open, onClose, onSubmit, initialData }) {
    const [form, setForm] = useState({ name: "", value: "" });
    const [errors, setErrors] = useState({});
    useEffect(() => {
        setForm(initialData || { name: "", value: "" });
        setErrors({});
    }, [initialData, open]);
    const validate = () => {
        const errs = {};
        if (!form.name) errs.name = "Name required";
        if (!form.value) errs.value = "Value required";
        setErrors(errs);
        return Object.keys(errs).length === 0;
    };
    const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });
    const handleSubmit = (e) => {
        e.preventDefault();
        if (validate()) onSubmit(form);
    };
    return (
        <ModalOverlay open={open}>
            <ModalBox onSubmit={handleSubmit}>
                <h2 style={{ margin: 0, color: "#7b9acc" }}>
                    {initialData ? "Edit Record" : "Add Record"}
                </h2>
                <div>
                    <Input
                        name="name"
                        placeholder="Name"
                        value={form.name}
                        onChange={handleChange}
                        autoFocus
                    />
                    {errors.name && <div style={{ color: "#e57373" }}>{errors.name}</div>}
                </div>
                <div>
                    <Input
                        name="value"
                        placeholder="Value"
                        value={form.value}
                        onChange={handleChange}
                    />
                    {errors.value && <div style={{ color: "#e57373" }}>{errors.value}</div>}
                </div>
                <ButtonRow>
                    <Button type="button" onClick={onClose}>Cancel</Button>
                    <Button primary type="submit">{initialData ? "Update" : "Add"}</Button>
                </ButtonRow>
            </ModalBox>
        </ModalOverlay>
    );
}

// utils/audit.js
export function logInteraction(action, details) {
    // Send to backend or store locally for audit compliance
    fetch("/api/audit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ action, details, timestamp: new Date().toISOString() }),
    });
}

// --- Backend (Express + Socket.io) ---
// server.js
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const mongoose = require("mongoose");
const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

app.use(express.json());
mongoose.connect("mongodb://localhost:27017/records", { useNewUrlParser: true, useUnifiedTopology: true });

const Record = mongoose.model("Record", { name: String, value: String });

io.on("connection", (socket) => {
    const sendAll = async () => socket.emit("records", await Record.find());
    socket.on("getRecords", sendAll);
    socket.on("addRecord", async (data) => {
        await Record.create(data);
        sendAll();
    });
    socket.on("updateRecord", async (data) => {
        await Record.findByIdAndUpdate(data._id, data);
        sendAll();
    });
    socket.on("deleteRecord", async (id) => {
        await Record.findByIdAndDelete(id);
        sendAll();
    });
});

app.post("/api/audit", (req, res) => {
    // Store audit log as needed
    res.sendStatus(204);
});

server.listen(4000, () => console.log("Backend running on 4000"));

/*
 * This codebase provides a clean, soft-colored, responsive UI with real-time backend sync,
 * audit logging, confirmation prompts, validation, and modern UX patterns.
 * For a full production app, expand error handling, authentication, and modularize further.
 */